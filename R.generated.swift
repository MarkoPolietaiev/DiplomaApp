//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `backgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundColor")
    /// Color `buttonColor`.
    static let buttonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "buttonColor")
    /// Color `titleColor`.
    static let titleColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "titleColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func buttonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.buttonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "titleColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func titleColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.titleColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "buttonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func buttonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.buttonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "titleColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func titleColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.titleColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `en.lproj`.
    static let enLproj = Rswift.FileResource(bundle: R.hostingBundle, name: "en", pathExtension: "lproj")
    /// Resource file `pl.lproj`.
    static let plLproj = Rswift.FileResource(bundle: R.hostingBundle, name: "pl", pathExtension: "lproj")
    /// Resource file `ru.lproj`.
    static let ruLproj = Rswift.FileResource(bundle: R.hostingBundle, name: "ru", pathExtension: "lproj")

    /// `bundle.url(forResource: "en", withExtension: "lproj")`
    static func enLproj(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.enLproj
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "pl", withExtension: "lproj")`
    static func plLproj(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.plLproj
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ru", withExtension: "lproj")`
    static func ruLproj(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ruLproj
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 30 images.
  struct image {
    /// Image `homeSelected`.
    static let homeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeSelected")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `likesSelected`.
    static let likesSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "likesSelected")
    /// Image `likes`.
    static let likes = Rswift.ImageResource(bundle: R.hostingBundle, name: "likes")
    /// Image `logInImage`.
    static let logInImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "logInImage")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `newPost`.
    static let newPost = Rswift.ImageResource(bundle: R.hostingBundle, name: "newPost")
    /// Image `post1`.
    static let post1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "post1")
    /// Image `post2`.
    static let post2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "post2")
    /// Image `post3`.
    static let post3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "post3")
    /// Image `post4`.
    static let post4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "post4")
    /// Image `post5`.
    static let post5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "post5")
    /// Image `post6`.
    static let post6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "post6")
    /// Image `profileSelected`.
    static let profileSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSelected")
    /// Image `profile`.
    static let profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "profile")
    /// Image `searchSelected`.
    static let searchSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchSelected")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `signUpImage`.
    static let signUpImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "signUpImage")
    /// Image `skill1`.
    static let skill1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill1")
    /// Image `skill2`.
    static let skill2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill2")
    /// Image `skill3`.
    static let skill3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill3")
    /// Image `skill4`.
    static let skill4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill4")
    /// Image `skill5`.
    static let skill5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill5")
    /// Image `skill6`.
    static let skill6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill6")
    /// Image `skill7`.
    static let skill7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill7")
    /// Image `skill8`.
    static let skill8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "skill8")
    /// Image `user1`.
    static let user1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user1")
    /// Image `user2`.
    static let user2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user2")
    /// Image `user3`.
    static let user3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "user3")
    /// Image `welcomeImage`.
    static let welcomeImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "welcomeImage")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "homeSelected", bundle: ..., traitCollection: ...)`
    static func homeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likes", bundle: ..., traitCollection: ...)`
    static func likes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "likesSelected", bundle: ..., traitCollection: ...)`
    static func likesSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likesSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logInImage", bundle: ..., traitCollection: ...)`
    static func logInImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logInImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "newPost", bundle: ..., traitCollection: ...)`
    static func newPost(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.newPost, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post1", bundle: ..., traitCollection: ...)`
    static func post1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post2", bundle: ..., traitCollection: ...)`
    static func post2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post3", bundle: ..., traitCollection: ...)`
    static func post3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post4", bundle: ..., traitCollection: ...)`
    static func post4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post5", bundle: ..., traitCollection: ...)`
    static func post5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "post6", bundle: ..., traitCollection: ...)`
    static func post6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.post6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "profileSelected", bundle: ..., traitCollection: ...)`
    static func profileSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchSelected", bundle: ..., traitCollection: ...)`
    static func searchSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signUpImage", bundle: ..., traitCollection: ...)`
    static func signUpImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUpImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill1", bundle: ..., traitCollection: ...)`
    static func skill1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill2", bundle: ..., traitCollection: ...)`
    static func skill2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill3", bundle: ..., traitCollection: ...)`
    static func skill3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill4", bundle: ..., traitCollection: ...)`
    static func skill4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill5", bundle: ..., traitCollection: ...)`
    static func skill5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill6", bundle: ..., traitCollection: ...)`
    static func skill6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill7", bundle: ..., traitCollection: ...)`
    static func skill7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "skill8", bundle: ..., traitCollection: ...)`
    static func skill8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.skill8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user1", bundle: ..., traitCollection: ...)`
    static func user1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user2", bundle: ..., traitCollection: ...)`
    static func user2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "user3", bundle: ..., traitCollection: ...)`
    static func user3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "welcomeImage", bundle: ..., traitCollection: ...)`
    static func welcomeImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.welcomeImage, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `DescriptionView`.
    static let descriptionView = _R.nib._DescriptionView()
    /// Nib `PostingTableViewCell`.
    static let postingTableViewCell = _R.nib._PostingTableViewCell()
    /// Nib `StepFooterView`.
    static let stepFooterView = _R.nib._StepFooterView()
    /// Nib `StepTableViewCell`.
    static let stepTableViewCell = _R.nib._StepTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DescriptionView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.descriptionView) instead")
    static func descriptionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.descriptionView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PostingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.postingTableViewCell) instead")
    static func postingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.postingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StepFooterView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stepFooterView) instead")
    static func stepFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stepFooterView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StepTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stepTableViewCell) instead")
    static func stepTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stepTableViewCell)
    }
    #endif

    static func descriptionView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.descriptionView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func postingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostingTableViewCell? {
      return R.nib.postingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostingTableViewCell
    }

    static func stepFooterView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.stepFooterView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func stepTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StepTableViewCell? {
      return R.nib.stepTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StepTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PostingTableViewCell`.
    static let postingTableViewCell: Rswift.ReuseIdentifier<PostingTableViewCell> = Rswift.ReuseIdentifier(identifier: "PostingTableViewCell")
    /// Reuse identifier `StepTableViewCell`.
    static let stepTableViewCell: Rswift.ReuseIdentifier<StepTableViewCell> = Rswift.ReuseIdentifier(identifier: "StepTableViewCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// en translation: Are you ready to dive into the world of productivity?
      ///
      /// Locales: en, pl, ru
      static let slide5Text = Rswift.StringResource(key: "slide5.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Confirm email
      ///
      /// Locales: en, pl, ru
      static let confirmEmail = Rswift.StringResource(key: "confirm.email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Confirm password
      ///
      /// Locales: en, ru
      static let confirmPassword = Rswift.StringResource(key: "confirm.password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en, pl, ru
      static let createAccount = Rswift.StringResource(key: "create.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en, pl, ru
      static let email = Rswift.StringResource(key: "email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: I don't have an account
      ///
      /// Locales: en, pl, ru
      static let noAccount = Rswift.StringResource(key: "no.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: I have an account
      ///
      /// Locales: en, pl, ru
      static let haveAccount = Rswift.StringResource(key: "have.account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: In the world of our day, with all the challenges and difficulties, we are often faced with the need to control our productivity on our own. After all, few people want to stand still. But how do you keep the inspiration for motivation?
      ///
      /// Locales: en, pl, ru
      static let slide2Text = Rswift.StringResource(key: "slide2.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Just add a goal you want to achieve, set a deadline, and share your successes with your loved ones! In addition, you can always support and rejoice in the success of other people in your environment.
      ///
      /// Locales: en, pl, ru
      static let slide4Text = Rswift.StringResource(key: "slide4.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Log In
      ///
      /// Locales: en, pl, ru
      static let logIn = Rswift.StringResource(key: "log.in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Now we will try to describe our goals and aspirations. How exactly we hope to make your life brighter, and what is not less important, more productive.
      ///
      /// Locales: en, pl, ru
      static let slide1Text = Rswift.StringResource(key: "slide1.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en, pl, ru
      static let password = Rswift.StringResource(key: "password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Ready!
      ///
      /// Locales: en, pl, ru
      static let ready = Rswift.StringResource(key: "ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, pl, ru
      static let start = Rswift.StringResource(key: "start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: This is where we come into play. With our service, it will be much easier for you to maintain a tone of productivity and track your progress at any period of time.
      ///
      /// Locales: en, pl, ru
      static let slide3Text = Rswift.StringResource(key: "slide3.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Username
      ///
      /// Locales: en, pl, ru
      static let username = Rswift.StringResource(key: "username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pl", "ru"], comment: nil)
      /// en translation: Welcome! We are happy to see you here
      ///
      /// Locales: en, ru
      static let welcome = Rswift.StringResource(key: "welcome", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Are you ready to dive into the world of productivity?
      ///
      /// Locales: en, pl, ru
      static func slide5Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slide5.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "slide5.text"
        }

        return NSLocalizedString("slide5.text", bundle: bundle, comment: "")
      }

      /// en translation: Confirm email
      ///
      /// Locales: en, pl, ru
      static func confirmEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm.email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm.email"
        }

        return NSLocalizedString("confirm.email", bundle: bundle, comment: "")
      }

      /// en translation: Confirm password
      ///
      /// Locales: en, ru
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm.password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm.password"
        }

        return NSLocalizedString("confirm.password", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en, pl, ru
      static func createAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("create.account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "create.account"
        }

        return NSLocalizedString("create.account", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en, pl, ru
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "email"
        }

        return NSLocalizedString("email", bundle: bundle, comment: "")
      }

      /// en translation: I don't have an account
      ///
      /// Locales: en, pl, ru
      static func noAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no.account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no.account"
        }

        return NSLocalizedString("no.account", bundle: bundle, comment: "")
      }

      /// en translation: I have an account
      ///
      /// Locales: en, pl, ru
      static func haveAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("have.account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "have.account"
        }

        return NSLocalizedString("have.account", bundle: bundle, comment: "")
      }

      /// en translation: In the world of our day, with all the challenges and difficulties, we are often faced with the need to control our productivity on our own. After all, few people want to stand still. But how do you keep the inspiration for motivation?
      ///
      /// Locales: en, pl, ru
      static func slide2Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slide2.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "slide2.text"
        }

        return NSLocalizedString("slide2.text", bundle: bundle, comment: "")
      }

      /// en translation: Just add a goal you want to achieve, set a deadline, and share your successes with your loved ones! In addition, you can always support and rejoice in the success of other people in your environment.
      ///
      /// Locales: en, pl, ru
      static func slide4Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slide4.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "slide4.text"
        }

        return NSLocalizedString("slide4.text", bundle: bundle, comment: "")
      }

      /// en translation: Log In
      ///
      /// Locales: en, pl, ru
      static func logIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("log.in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "log.in"
        }

        return NSLocalizedString("log.in", bundle: bundle, comment: "")
      }

      /// en translation: Now we will try to describe our goals and aspirations. How exactly we hope to make your life brighter, and what is not less important, more productive.
      ///
      /// Locales: en, pl, ru
      static func slide1Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slide1.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "slide1.text"
        }

        return NSLocalizedString("slide1.text", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en, pl, ru
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "password"
        }

        return NSLocalizedString("password", bundle: bundle, comment: "")
      }

      /// en translation: Ready!
      ///
      /// Locales: en, pl, ru
      static func ready(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ready", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ready"
        }

        return NSLocalizedString("ready", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, pl, ru
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start"
        }

        return NSLocalizedString("start", bundle: bundle, comment: "")
      }

      /// en translation: This is where we come into play. With our service, it will be much easier for you to maintain a tone of productivity and track your progress at any period of time.
      ///
      /// Locales: en, pl, ru
      static func slide3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("slide3.text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "slide3.text"
        }

        return NSLocalizedString("slide3.text", bundle: bundle, comment: "")
      }

      /// en translation: Username
      ///
      /// Locales: en, pl, ru
      static func username(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("username", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "username"
        }

        return NSLocalizedString("username", bundle: bundle, comment: "")
      }

      /// en translation: Welcome! We are happy to see you here
      ///
      /// Locales: en, ru
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome"
        }

        return NSLocalizedString("welcome", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _StepFooterView.validate()
      try _StepTableViewCell.validate()
    }

    struct _DescriptionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DescriptionView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PostingTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PostingTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PostingTableViewCell"
      let name = "PostingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PostingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PostingTableViewCell
      }

      fileprivate init() {}
    }

    struct _StepFooterView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StepFooterView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus.circle.fill' is used in nib 'StepFooterView', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in nib 'StepFooterView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _StepTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = StepTableViewCell

      let bundle = R.hostingBundle
      let identifier = "StepTableViewCell"
      let name = "StepTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StepTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StepTableViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.grid.3x1.folder.badge.plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'square.grid.3x1.folder.badge.plus' is used in nib 'StepTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in nib 'StepTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try auth.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let descriptionViewController = StoryboardViewControllerResource<DescriptionViewController>(identifier: "DescriptionViewController")
      let firstViewController = StoryboardViewControllerResource<FirstViewController>(identifier: "FirstViewController")
      let name = "Auth"
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")

      func descriptionViewController(_: Void = ()) -> DescriptionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: descriptionViewController)
      }

      func firstViewController(_: Void = ()) -> FirstViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: firstViewController)
      }

      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chevron.left' is used in storyboard 'Auth', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "logInImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logInImage' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signUpImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signUpImage' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "welcomeImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'welcomeImage' is used in storyboard 'Auth', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Color' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in storyboard 'Auth', but couldn't be loaded.") }
          if UIKit.UIColor(named: "titleColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'titleColor' is used in storyboard 'Auth', but couldn't be loaded.") }
        }
        if _R.storyboard.auth().descriptionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'descriptionViewController' could not be loaded from storyboard 'Auth' as 'DescriptionViewController'.") }
        if _R.storyboard.auth().firstViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'firstViewController' could not be loaded from storyboard 'Auth' as 'FirstViewController'.") }
        if _R.storyboard.auth().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Auth' as 'SignInViewController'.") }
        if _R.storyboard.auth().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Auth' as 'SignUpViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let imageDetailViewController = StoryboardViewControllerResource<ImageDetailViewController>(identifier: "ImageDetailViewController")
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"
      let postingViewController = StoryboardViewControllerResource<PostingViewController>(identifier: "PostingViewController")
      let stepViewController = StoryboardViewControllerResource<StepViewController>(identifier: "StepViewController")

      func imageDetailViewController(_: Void = ()) -> ImageDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageDetailViewController)
      }

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      func postingViewController(_: Void = ()) -> PostingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: postingViewController)
      }

      func stepViewController(_: Void = ()) -> StepViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stepViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark.seal.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'checkmark.seal.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "multiply") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'multiply' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileSelected' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.grid.3x1.folder.badge.plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'square.grid.3x1.folder.badge.plus' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "buttonColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'buttonColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "titleColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'titleColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().imageDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageDetailViewController' could not be loaded from storyboard 'Main' as 'ImageDetailViewController'.") }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
        if _R.storyboard.main().postingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'postingViewController' could not be loaded from storyboard 'Main' as 'PostingViewController'.") }
        if _R.storyboard.main().stepViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stepViewController' could not be loaded from storyboard 'Main' as 'StepViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "profileSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'profileSelected' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
